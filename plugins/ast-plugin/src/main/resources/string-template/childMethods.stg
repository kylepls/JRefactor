addMethods(obj) ::= <<
<if(obj.type.isClass || obj.type.isAbstractClass)>
<writeGetAllChildrenMethod(obj)>
<writeGetDirectChildrenMethod(obj)>
<writeReplaceChildMethod(obj)>
<endif>
<if(obj.type.isEnum)>
<writeEnumMethods(obj)>
<endif>
>>

writeGetAllChildrenMethod(obj) ::= <<
public java.util.List\<Object> getAllChildren() {
    java.util.List\<Object> children = new java.util.ArrayList\<>();
    <obj.fields : {field | <addField(field)>}; separator="\n">
<if(obj.superType)>    children.addAll(super.getAllChildren());<endif>
    return children;
}
>>

writeGetDirectChildrenMethod(obj) ::= <<
public java.util.List\<Object> getDirectChildren() {
    java.util.List\<Object> children = new java.util.ArrayList\<>();
    <obj.fields : {field | <addField(field)>}; separator="\n">
    return children;
}
>>

writeReplaceChildMethod(obj) ::= <<
public void replaceChild(Object child, Object replacement) {
    <obj.fields : {field | <replaceField(field)>}; separator="\n"><\\>
<if(obj.superType)>
    super.replaceChild(child, replacement);
<else>
    throw new RuntimeException("Could not find " + child + " in " + this);
<endif>
}
>>

replaceField(obj) ::= <<
<if(obj.isSet)>
if (<obj.name>.removeIf(s -> s == child)) {
    <obj.name>.add((<obj.generic>) replacement);
    return;
}
<elseif(obj.isList)><\\>
for (int i = 0; i \< <obj.name>.size(); i++) {
    if (<obj.name>.get(i) == child) {
        <obj.name>.set(i, (<obj.generic>) replacement);
        return;
    }
}
<elseif(obj.isOptional)>
if (<obj.name>.isPresent() && <obj.name>.get() == child) {
    this.<obj.name> = java.util.Optional.of((<obj.generic>) replacement);
    return;
}
<elseif(!obj.isPrimitive)>
if (<obj.name> == child) {
    this.<obj.name> = (<obj.type>) replacement;
    return;
}<\\>
<endif>
>>

writeEnumMethods(obj) ::= <<
public java.util.List\<Object> getDirectChildren() {
    return java.util.Collections.emptyList();
}

public java.util.List\<Object> getAllChildren() {
    return java.util.Collections.emptyList();
}
>>

addField(obj) ::= <%
<if(obj.isCollection)>
children.addAll(<obj.name>);
<endif>
<if(obj.isOptional)>
<obj.name>.ifPresent(children::add);
<endif>
<if(!obj.isCollection && !obj.isOptional)>
children.add(<obj.name>);
<endif>
%>