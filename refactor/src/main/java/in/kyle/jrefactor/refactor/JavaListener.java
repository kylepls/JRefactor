package in.kyle.jrefactor.refactor;
public interface JavaListener {
    void enterOperator(in.kyle.jrefactor.parser.expression.JAssignment.Operator object);
    void exitOperator(in.kyle.jrefactor.parser.expression.JAssignment.Operator object);
    void enterJAssignment(in.kyle.jrefactor.parser.expression.JAssignment object);
    void exitJAssignment(in.kyle.jrefactor.parser.expression.JAssignment object);
    void enterJClassInstanceCreationExpression(in.kyle.jrefactor.parser.expression.JClassInstanceCreationExpression object);
    void exitJClassInstanceCreationExpression(in.kyle.jrefactor.parser.expression.JClassInstanceCreationExpression object);
    void enterJExpression(in.kyle.jrefactor.parser.expression.JExpression object);
    void exitJExpression(in.kyle.jrefactor.parser.expression.JExpression object);
    void enterJExpressionName(in.kyle.jrefactor.parser.expression.JExpressionName object);
    void exitJExpressionName(in.kyle.jrefactor.parser.expression.JExpressionName object);
    void enterOperation(in.kyle.jrefactor.parser.expression.JLeftRightExpression.Operation object);
    void exitOperation(in.kyle.jrefactor.parser.expression.JLeftRightExpression.Operation object);
    void enterJLeftRightExpression(in.kyle.jrefactor.parser.expression.JLeftRightExpression object);
    void exitJLeftRightExpression(in.kyle.jrefactor.parser.expression.JLeftRightExpression object);
    void enterJMethodInvocation(in.kyle.jrefactor.parser.expression.JMethodInvocation object);
    void exitJMethodInvocation(in.kyle.jrefactor.parser.expression.JMethodInvocation object);
    void enterJParenthesisExpression(in.kyle.jrefactor.parser.expression.JParenthesisExpression object);
    void exitJParenthesisExpression(in.kyle.jrefactor.parser.expression.JParenthesisExpression object);
    void enterJTernaryExpression(in.kyle.jrefactor.parser.expression.JTernaryExpression object);
    void exitJTernaryExpression(in.kyle.jrefactor.parser.expression.JTernaryExpression object);
    void enterJTypeReferenceExpression(in.kyle.jrefactor.parser.expression.JTypeReferenceExpression object);
    void exitJTypeReferenceExpression(in.kyle.jrefactor.parser.expression.JTypeReferenceExpression object);
    void enterJUnaryExpression(in.kyle.jrefactor.parser.expression.JUnaryExpression object);
    void exitJUnaryExpression(in.kyle.jrefactor.parser.expression.JUnaryExpression object);
    void enterJIdentifierParameter(in.kyle.jrefactor.parser.expression.lambda.JIdentifierParameter object);
    void exitJIdentifierParameter(in.kyle.jrefactor.parser.expression.lambda.JIdentifierParameter object);
    void enterJInferredParameters(in.kyle.jrefactor.parser.expression.lambda.JInferredParameters object);
    void exitJInferredParameters(in.kyle.jrefactor.parser.expression.lambda.JInferredParameters object);
    void enterJLambdaBody(in.kyle.jrefactor.parser.expression.lambda.JLambdaBody object);
    void exitJLambdaBody(in.kyle.jrefactor.parser.expression.lambda.JLambdaBody object);
    void enterJLambdaExpression(in.kyle.jrefactor.parser.expression.lambda.JLambdaExpression object);
    void exitJLambdaExpression(in.kyle.jrefactor.parser.expression.lambda.JLambdaExpression object);
    void enterJLambdaParameters(in.kyle.jrefactor.parser.expression.lambda.JLambdaParameters object);
    void exitJLambdaParameters(in.kyle.jrefactor.parser.expression.lambda.JLambdaParameters object);
    void enterJBooleanLiteral(in.kyle.jrefactor.parser.expression.literal.JBooleanLiteral object);
    void exitJBooleanLiteral(in.kyle.jrefactor.parser.expression.literal.JBooleanLiteral object);
    void enterJCharacterLiteral(in.kyle.jrefactor.parser.expression.literal.JCharacterLiteral object);
    void exitJCharacterLiteral(in.kyle.jrefactor.parser.expression.literal.JCharacterLiteral object);
    void enterJDoubleLiteral(in.kyle.jrefactor.parser.expression.literal.JDoubleLiteral object);
    void exitJDoubleLiteral(in.kyle.jrefactor.parser.expression.literal.JDoubleLiteral object);
    void enterJFloatingLiteral(in.kyle.jrefactor.parser.expression.literal.JFloatingLiteral object);
    void exitJFloatingLiteral(in.kyle.jrefactor.parser.expression.literal.JFloatingLiteral object);
    void enterJFloatLiteral(in.kyle.jrefactor.parser.expression.literal.JFloatLiteral object);
    void exitJFloatLiteral(in.kyle.jrefactor.parser.expression.literal.JFloatLiteral object);
    void enterJIntegerLiteral(in.kyle.jrefactor.parser.expression.literal.JIntegerLiteral object);
    void exitJIntegerLiteral(in.kyle.jrefactor.parser.expression.literal.JIntegerLiteral object);
    void enterJLiteral(in.kyle.jrefactor.parser.expression.literal.JLiteral object);
    void exitJLiteral(in.kyle.jrefactor.parser.expression.literal.JLiteral object);
    void enterJLongLiteral(in.kyle.jrefactor.parser.expression.literal.JLongLiteral object);
    void exitJLongLiteral(in.kyle.jrefactor.parser.expression.literal.JLongLiteral object);
    void enterJNumericLiteral(in.kyle.jrefactor.parser.expression.literal.JNumericLiteral object);
    void exitJNumericLiteral(in.kyle.jrefactor.parser.expression.literal.JNumericLiteral object);
    void enterJStringLiteral(in.kyle.jrefactor.parser.expression.literal.JStringLiteral object);
    void exitJStringLiteral(in.kyle.jrefactor.parser.expression.literal.JStringLiteral object);
    void enterJObject(in.kyle.jrefactor.parser.JObject object);
    void exitJObject(in.kyle.jrefactor.parser.JObject object);
    void enterJObjectList(in.kyle.jrefactor.parser.JObjectList object);
    void exitJObjectList(in.kyle.jrefactor.parser.JObjectList object);
    void enterJBreakStatement(in.kyle.jrefactor.parser.statement.control.JBreakStatement object);
    void exitJBreakStatement(in.kyle.jrefactor.parser.statement.control.JBreakStatement object);
    void enterJCatchClause(in.kyle.jrefactor.parser.statement.control.JCatchClause object);
    void exitJCatchClause(in.kyle.jrefactor.parser.statement.control.JCatchClause object);
    void enterJContinueStatement(in.kyle.jrefactor.parser.statement.control.JContinueStatement object);
    void exitJContinueStatement(in.kyle.jrefactor.parser.statement.control.JContinueStatement object);
    void enterJControlStatement(in.kyle.jrefactor.parser.statement.control.JControlStatement object);
    void exitJControlStatement(in.kyle.jrefactor.parser.statement.control.JControlStatement object);
    void enterJIfThenElseStatement(in.kyle.jrefactor.parser.statement.control.JIfThenElseStatement object);
    void exitJIfThenElseStatement(in.kyle.jrefactor.parser.statement.control.JIfThenElseStatement object);
    void enterJIfThenStatement(in.kyle.jrefactor.parser.statement.control.JIfThenStatement object);
    void exitJIfThenStatement(in.kyle.jrefactor.parser.statement.control.JIfThenStatement object);
    void enterJReturnStatement(in.kyle.jrefactor.parser.statement.control.JReturnStatement object);
    void exitJReturnStatement(in.kyle.jrefactor.parser.statement.control.JReturnStatement object);
    void enterJSwitchStatement(in.kyle.jrefactor.parser.statement.control.JSwitchStatement object);
    void exitJSwitchStatement(in.kyle.jrefactor.parser.statement.control.JSwitchStatement object);
    void enterJSynchronizedStatement(in.kyle.jrefactor.parser.statement.control.JSynchronizedStatement object);
    void exitJSynchronizedStatement(in.kyle.jrefactor.parser.statement.control.JSynchronizedStatement object);
    void enterJThrowStatement(in.kyle.jrefactor.parser.statement.control.JThrowStatement object);
    void exitJThrowStatement(in.kyle.jrefactor.parser.statement.control.JThrowStatement object);
    void enterJTryStatement(in.kyle.jrefactor.parser.statement.control.JTryStatement object);
    void exitJTryStatement(in.kyle.jrefactor.parser.statement.control.JTryStatement object);
    void enterJTryWithResourcesStatement(in.kyle.jrefactor.parser.statement.control.JTryWithResourcesStatement object);
    void exitJTryWithResourcesStatement(in.kyle.jrefactor.parser.statement.control.JTryWithResourcesStatement object);
    void enterJBasicForStatement(in.kyle.jrefactor.parser.statement.control.loops.JBasicForStatement object);
    void exitJBasicForStatement(in.kyle.jrefactor.parser.statement.control.loops.JBasicForStatement object);
    void enterJDoWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.JDoWhileStatement object);
    void exitJDoWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.JDoWhileStatement object);
    void enterJEnhancedForStatement(in.kyle.jrefactor.parser.statement.control.loops.JEnhancedForStatement object);
    void exitJEnhancedForStatement(in.kyle.jrefactor.parser.statement.control.loops.JEnhancedForStatement object);
    void enterJLoopStatement(in.kyle.jrefactor.parser.statement.control.loops.JLoopStatement object);
    void exitJLoopStatement(in.kyle.jrefactor.parser.statement.control.loops.JLoopStatement object);
    void enterJWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.JWhileStatement object);
    void exitJWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.JWhileStatement object);
    void enterWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.WhileStatement object);
    void exitWhileStatement(in.kyle.jrefactor.parser.statement.control.loops.WhileStatement object);
    void enterJAssertStatement(in.kyle.jrefactor.parser.statement.JAssertStatement object);
    void exitJAssertStatement(in.kyle.jrefactor.parser.statement.JAssertStatement object);
    void enterJBlock(in.kyle.jrefactor.parser.statement.JBlock object);
    void exitJBlock(in.kyle.jrefactor.parser.statement.JBlock object);
    void enterJEmptyStatement(in.kyle.jrefactor.parser.statement.JEmptyStatement object);
    void exitJEmptyStatement(in.kyle.jrefactor.parser.statement.JEmptyStatement object);
    void enterJExpressionStatement(in.kyle.jrefactor.parser.statement.JExpressionStatement object);
    void exitJExpressionStatement(in.kyle.jrefactor.parser.statement.JExpressionStatement object);
    void enterJLabledStatement(in.kyle.jrefactor.parser.statement.JLabledStatement object);
    void exitJLabledStatement(in.kyle.jrefactor.parser.statement.JLabledStatement object);
    void enterJLocalVariableDeclaration(in.kyle.jrefactor.parser.statement.JLocalVariableDeclaration object);
    void exitJLocalVariableDeclaration(in.kyle.jrefactor.parser.statement.JLocalVariableDeclaration object);
    void enterJStatement(in.kyle.jrefactor.parser.statement.JStatement object);
    void exitJStatement(in.kyle.jrefactor.parser.statement.JStatement object);
    void enterAnnotationBase(in.kyle.jrefactor.parser.unit.AnnotationBase object);
    void exitAnnotationBase(in.kyle.jrefactor.parser.unit.AnnotationBase object);
    void enterJAnnotationBody(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationBody object);
    void exitJAnnotationBody(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationBody object);
    void enterJAnnotationMember(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationMember object);
    void exitJAnnotationMember(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationMember object);
    void enterJAnnotationTypeElement(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationTypeElement object);
    void exitJAnnotationTypeElement(in.kyle.jrefactor.parser.unit.body.annotationtype.JAnnotationTypeElement object);
    void enterJElementValue(in.kyle.jrefactor.parser.unit.body.annotationtype.JElementValue object);
    void exitJElementValue(in.kyle.jrefactor.parser.unit.body.annotationtype.JElementValue object);
    void enterJClassBody(in.kyle.jrefactor.parser.unit.body.classtype.JClassBody object);
    void exitJClassBody(in.kyle.jrefactor.parser.unit.body.classtype.JClassBody object);
    void enterJClassInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassInitializer object);
    void exitJClassInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassInitializer object);
    void enterJClassInstanceInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassInstanceInitializer object);
    void exitJClassInstanceInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassInstanceInitializer object);
    void enterJClassMember(in.kyle.jrefactor.parser.unit.body.classtype.JClassMember object);
    void exitJClassMember(in.kyle.jrefactor.parser.unit.body.classtype.JClassMember object);
    void enterJClassStaticInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassStaticInitializer object);
    void exitJClassStaticInitializer(in.kyle.jrefactor.parser.unit.body.classtype.JClassStaticInitializer object);
    void enterJField(in.kyle.jrefactor.parser.unit.body.classtype.JField object);
    void exitJField(in.kyle.jrefactor.parser.unit.body.classtype.JField object);
    void enterJEnumBody(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumBody object);
    void exitJEnumBody(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumBody object);
    void enterJEnumConstant(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumConstant object);
    void exitJEnumConstant(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumConstant object);
    void enterJEnumMember(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumMember object);
    void exitJEnumMember(in.kyle.jrefactor.parser.unit.body.enumtype.JEnumMember object);
    void enterJInterfaceBody(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceBody object);
    void exitJInterfaceBody(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceBody object);
    void enterJInterfaceMember(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceMember object);
    void exitJInterfaceMember(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceMember object);
    void enterJInterfaceMethod(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceMethod object);
    void exitJInterfaceMethod(in.kyle.jrefactor.parser.unit.body.interfacetype.JInterfaceMethod object);
    void enterJArgumentList(in.kyle.jrefactor.parser.unit.body.JArgumentList object);
    void exitJArgumentList(in.kyle.jrefactor.parser.unit.body.JArgumentList object);
    void enterJConstructorDeclaration(in.kyle.jrefactor.parser.unit.body.JConstructorDeclaration object);
    void exitJConstructorDeclaration(in.kyle.jrefactor.parser.unit.body.JConstructorDeclaration object);
    void enterJMember(in.kyle.jrefactor.parser.unit.body.JMember object);
    void exitJMember(in.kyle.jrefactor.parser.unit.body.JMember object);
    void enterJMemberList(in.kyle.jrefactor.parser.unit.body.JMemberList object);
    void exitJMemberList(in.kyle.jrefactor.parser.unit.body.JMemberList object);
    void enterJMethod(in.kyle.jrefactor.parser.unit.body.JMethod object);
    void exitJMethod(in.kyle.jrefactor.parser.unit.body.JMethod object);
    void enterJMethodHeader(in.kyle.jrefactor.parser.unit.body.JMethodHeader object);
    void exitJMethodHeader(in.kyle.jrefactor.parser.unit.body.JMethodHeader object);
    void enterJParameter(in.kyle.jrefactor.parser.unit.body.JParameter object);
    void exitJParameter(in.kyle.jrefactor.parser.unit.body.JParameter object);
    void enterJTypeBody(in.kyle.jrefactor.parser.unit.body.JTypeBody object);
    void exitJTypeBody(in.kyle.jrefactor.parser.unit.body.JTypeBody object);
    void enterJVariable(in.kyle.jrefactor.parser.unit.body.JVariable object);
    void exitJVariable(in.kyle.jrefactor.parser.unit.body.JVariable object);
    void enterJVariableInitializer(in.kyle.jrefactor.parser.unit.body.JVariableInitializer object);
    void exitJVariableInitializer(in.kyle.jrefactor.parser.unit.body.JVariableInitializer object);
    void enterVariableHolder(in.kyle.jrefactor.parser.unit.body.VariableHolder object);
    void exitVariableHolder(in.kyle.jrefactor.parser.unit.body.VariableHolder object);
    void enterJAnnotatable(in.kyle.jrefactor.parser.unit.JAnnotatable object);
    void exitJAnnotatable(in.kyle.jrefactor.parser.unit.JAnnotatable object);
    void enterJAnnotation(in.kyle.jrefactor.parser.unit.JAnnotation object);
    void exitJAnnotation(in.kyle.jrefactor.parser.unit.JAnnotation object);
    void enterJElementPair(in.kyle.jrefactor.parser.unit.JAnnotationValue.JElementPair object);
    void exitJElementPair(in.kyle.jrefactor.parser.unit.JAnnotationValue.JElementPair object);
    void enterJPairCollection(in.kyle.jrefactor.parser.unit.JAnnotationValue.JPairCollection object);
    void exitJPairCollection(in.kyle.jrefactor.parser.unit.JAnnotationValue.JPairCollection object);
    void enterJSingleValue(in.kyle.jrefactor.parser.unit.JAnnotationValue.JSingleValue object);
    void exitJSingleValue(in.kyle.jrefactor.parser.unit.JAnnotationValue.JSingleValue object);
    void enterJAnnotationValue(in.kyle.jrefactor.parser.unit.JAnnotationValue object);
    void exitJAnnotationValue(in.kyle.jrefactor.parser.unit.JAnnotationValue object);
    void enterJArrayTypeName(in.kyle.jrefactor.parser.unit.JArrayTypeName object);
    void exitJArrayTypeName(in.kyle.jrefactor.parser.unit.JArrayTypeName object);
    void enterJCompilationUnit(in.kyle.jrefactor.parser.unit.JCompilationUnit object);
    void exitJCompilationUnit(in.kyle.jrefactor.parser.unit.JCompilationUnit object);
    void enterJIdentifier(in.kyle.jrefactor.parser.unit.JIdentifier object);
    void exitJIdentifier(in.kyle.jrefactor.parser.unit.JIdentifier object);
    void enterJImport(in.kyle.jrefactor.parser.unit.JImport object);
    void exitJImport(in.kyle.jrefactor.parser.unit.JImport object);
    void enterJModifier(in.kyle.jrefactor.parser.unit.JModifier object);
    void exitJModifier(in.kyle.jrefactor.parser.unit.JModifier object);
    void enterJPackage(in.kyle.jrefactor.parser.unit.JPackage object);
    void exitJPackage(in.kyle.jrefactor.parser.unit.JPackage object);
    void enterJParameterList(in.kyle.jrefactor.parser.unit.JParameterList object);
    void exitJParameterList(in.kyle.jrefactor.parser.unit.JParameterList object);
    void enterJThrowsList(in.kyle.jrefactor.parser.unit.JThrowsList object);
    void exitJThrowsList(in.kyle.jrefactor.parser.unit.JThrowsList object);
    void enterJReferenceTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument.JReferenceTypeArgument object);
    void exitJReferenceTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument.JReferenceTypeArgument object);
    void enterType(in.kyle.jrefactor.parser.unit.JTypeArgument.JWildcardTypeArgument.Type object);
    void exitType(in.kyle.jrefactor.parser.unit.JTypeArgument.JWildcardTypeArgument.Type object);
    void enterJWildcardTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument.JWildcardTypeArgument object);
    void exitJWildcardTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument.JWildcardTypeArgument object);
    void enterJTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument object);
    void exitJTypeArgument(in.kyle.jrefactor.parser.unit.JTypeArgument object);
    void enterJTypeDeclaration(in.kyle.jrefactor.parser.unit.JTypeDeclaration object);
    void exitJTypeDeclaration(in.kyle.jrefactor.parser.unit.JTypeDeclaration object);
    void enterJTypeName(in.kyle.jrefactor.parser.unit.JTypeName object);
    void exitJTypeName(in.kyle.jrefactor.parser.unit.JTypeName object);
    void enterJTypeParameter(in.kyle.jrefactor.parser.unit.JTypeParameter object);
    void exitJTypeParameter(in.kyle.jrefactor.parser.unit.JTypeParameter object);
    void enterJTypeParameterList(in.kyle.jrefactor.parser.unit.JTypeParameterList object);
    void exitJTypeParameterList(in.kyle.jrefactor.parser.unit.JTypeParameterList object);
    void enterModifiable(in.kyle.jrefactor.parser.unit.Modifiable object);
    void exitModifiable(in.kyle.jrefactor.parser.unit.Modifiable object);
    void enterModifierList(in.kyle.jrefactor.parser.unit.ModifierList object);
    void exitModifierList(in.kyle.jrefactor.parser.unit.ModifierList object);
    void enterTypeable(in.kyle.jrefactor.parser.unit.Typeable object);
    void exitTypeable(in.kyle.jrefactor.parser.unit.Typeable object);
    void enterJAnnotationDeclaration(in.kyle.jrefactor.parser.unit.types.JAnnotationDeclaration object);
    void exitJAnnotationDeclaration(in.kyle.jrefactor.parser.unit.types.JAnnotationDeclaration object);
    void enterJClassDeclaration(in.kyle.jrefactor.parser.unit.types.JClassDeclaration object);
    void exitJClassDeclaration(in.kyle.jrefactor.parser.unit.types.JClassDeclaration object);
    void enterJEnumDeclaration(in.kyle.jrefactor.parser.unit.types.JEnumDeclaration object);
    void exitJEnumDeclaration(in.kyle.jrefactor.parser.unit.types.JEnumDeclaration object);
    void enterJInterfaceDeclaration(in.kyle.jrefactor.parser.unit.types.JInterfaceDeclaration object);
    void exitJInterfaceDeclaration(in.kyle.jrefactor.parser.unit.types.JInterfaceDeclaration object);

}