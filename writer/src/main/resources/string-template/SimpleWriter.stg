import "Utils.stg"

JModifier(obj) ::= <<
<obj.javaString>
>>

JAnnotation(obj) ::= <%
@<obj.type>
<if(obj.values)>(<csv(obj.values)>)<endif>
%>

JCompilationUnit(obj) ::= <%
<if(obj.packageName.present)>package <obj.packageName>;
<if(obj.importss || obj.types)><\n><endif>
<endif>
<collection(obj.importss, "\n")>
%>

JIdentifier(obj) ::= <<
<obj.name>
>>

JImport(obj) ::= <%
import 
<if(obj.staticImport)>static <endif>
<if(obj.packageName.present)><obj.packageName>.<endif><obj.name>
<if(obj.onDemand)>
    <if(obj.name)>.<endif>
*
<endif>;
%>

JPropertyLookup(obj) ::= <<
<collection(obj.areas, ".")>
>>

JStatementElse(obj) ::= <<
else<if(obj.condition.present)> if(<obj.condition>)<endif>
    <obj.statement>
>>

JTypeName(obj) ::= <<
<obj.type>
>>

JVariable(obj) ::= <<
<obj.name><if(obj.initializer.present)> = <obj.initializer><endif>
>>

JValuePair(obj) ::= <<
<obj.identifier> = <obj.value>
>>

JValueSingle(obj) ::= <<
<obj.value>
>>

JExpressionAssignment(obj) ::= <<
<obj.left> <obj.operator> <obj.right>
>>

JAssignmentOperator(obj) ::= <<
<obj.javaString>
>>

JExpressionClassInstanceCreation(obj) ::= <%
new <obj.type>
<writeTypeArguments(obj)>
(<obj.arguments; separator=",">)
<if(obj.body.present)> <obj.body><endif>
%>

JExpressionLambda(obj) ::= <%
(<csv(obj.parameters)>)-><obj.body>
%>

JExpressionLeftRight(obj) ::= <<
<obj.left> <obj.operator> <obj.right>
>>

JLeftRightOperator(obj) ::= <<
<obj.javaString>
>>

JExpressionMethodInvocation(obj) ::= <%
<if(obj.methodArea.present)><obj.methodArea>.<endif>
<obj.methodName>
<writeTypeArguments(obj)>
(<csv(obj.arguments)>)
%>

JExpressionName(obj) ::= <<
<obj.identifier>
>>

JExpressionParenthesis(obj) ::= <<
(<obj.expression>)
>>

JExpressionTernary(obj) ::= <<
<obj.condition> ? <obj.left> : <obj.right>
>>

JExpressionUnary(obj) ::= <<
<obj.expression; format=obj.operator.formatString>
>>

JLiteralBoolean(obj) ::= <<
<obj.value>
>>

JLiteralCharacter(obj) ::= <<
'<obj.value>'
>>

JLiteralNumeric(obj) ::= <<
<obj.value>
>>

JLiteralString(obj) ::= <<
"<obj.value>"
>>

JLiteralFloating(obj) ::= <<
<obj.value>
>>

JLiteralInteger(obj) ::= <<
<obj.value>
>>

JLiteralLong(obj) ::= <<
<obj.value>
>>

JLiteralDouble(obj) ::= <<
<obj.value>
>>

JLiteralFloat(obj) ::= <<
<obj.value>
>>

JCatchClause(obj) ::= <<
catch(<collection(obj.catchTypes, " | ")> <obj.variable>) <obj.block>
>>

JConstructorDeclaration(obj) ::= <%
<annotatableSpace(obj)>
<obj.identifier>(<csv(obj.parameters)>)
<if(obj.throwsTypes)> throws <csv(obj.throwsTypes)><endif><\ ><obj.body>
%>

JField(obj) ::= <%
<annotatableSpace(obj)>
<obj.type> <collection(obj.variables, ", ")>;
%>

JParameter(obj) ::= <<
<obj.type> <obj.name>
>>

JAnnotationField(obj) ::= <%
<annotatableSpace(obj)><obj.type> <obj.identifier>()
<if(obj.defaultValue.present)> default <obj.defaultValue><endif>;
%>

JEnumConstant(obj) ::= <%
<annotatableSpace(obj)><obj.identifier>(<csv(obj.arguments)>)
<if(obj.body.present)> <obj.body><endif>
%>

JMethodHeader(obj) ::= <%
<annotatableSpace(obj)>
<if(obj.typeParameters)><writeTypeParameters(obj)><\ ><endif>
<obj.returns><\ >
<obj.identifier>(<csv(obj.parameters)>)
<if(obj.throwsTypes)> throws <csv(obj.throwsTypes)><endif>
%>

JTypeParameter(obj) ::= <<
<obj.identifier><if(obj.bounds)> extends <collection(obj.bounds, " & ")><endif>
>>

JAnnotationType(obj) ::= <<
<writeJType(obj, "@interface")>
>>

JEnum(obj) ::= <<
<writeJType(obj, "enum")>
>>

JClass(obj) ::= <<
<writeJType(obj, "class", JClassSuper(obj))>
>>

JClassSuper(obj) ::= <%
<writeTypeParameters(obj)>
<if(obj.superType.present)> extends <obj.superType><endif>
%>

JInterface(obj) ::= <<
<writeJType(obj, "class", JInterfaceSuper(obj), "extends")>
>>

JInterfaceSuper(obj) ::= <<
<writeTypeParameters(obj)>
>>

JExpressionTypeReference(obj) ::= <<
<obj.reference>
>>

JTypeArgumentReference(obj) ::= <<
<obj.reference>
>>

JTypeArgumentWildcard(obj) ::= <%
?
<if(obj.type)> <obj.type> <obj.reference><endif>
%>

JWildcardType(obj) ::= <<
<obj.javaString>
>>

JStatementBlock(obj) ::= <%
{
<if(obj.elements)>
<\n><indent(collection(obj.elements, "\n"))><\n>
<endif>
}
%>

JStatementAssert(obj) ::= <%
assert <obj.assertion>
<if(obj.message.present)> : <obj.message><endif>
;
%>

JStatementEmpty(obj) ::= <<
;
>>

JStatementExpression(obj) ::= <<
<obj.expression>;
>>

JStatementLabeled(obj) ::= <<
<obj.identifier>:
    <obj.statement>
>>

JStatementLocalVariableDeclaration(obj) ::= <<
<annotatableSpace(obj)><obj.type> <csv(obj.variables)>;
>>

JStatementIf(obj) ::= <%
if (<obj.expression>)
<\n><(indent(obj.statement))>
<if(obj.elseStatements)><\n><endif>
<collection(obj.elseStatements, " ")>
%>

JStatementReturn(obj) ::= <%
return
<if(obj.expression.present)> <obj.expression><endif>
;
%>

JStatementSwitch(obj) ::= <%
switch (<obj.expression>) {
<if(obj.caseElements)><\n><indent(collection(obj.caseElements, "\n"))><\n><endif>
}
%>

JSwitchCaseExpression(obj) ::= <%
case <obj.condition>:
<if(obj.statements)><\n><indent(collection(obj.statements, "\n"))><endif>
%>

JSwitchCaseDefault(obj) ::= <%
default:
<if(obj.statements)><\n><indent(collection(obj.statements, "\n"))><endif>
%>

JStatementSynchronized(obj) ::= <<
synchronized (<obj.expression>) <obj.block>
>>

JStatementThrow(obj) ::= <<
throw <obj.expression>;
>>

JStatementTry(obj) ::= <%
try 
<obj.block>
<if(obj.catchClauses)> <collection(obj.catchClauses, " ")><endif>
<if(obj.finallyBlock.present)> finally <obj.finallyBlock><endif>
%>

JStatementBreak(obj) ::= <%
break
<if(obj.identifier.present)> <obj.identifier><endif>
;
%>

JStatementContinue(obj) ::= <%
continue
<if(obj.identifier.present)> <obj.identifier><endif>
;
%>

JStatementWhile(obj) ::= <<
while (<obj.expression>) <obj.statement>
>>

JStatementBasicFor(obj) ::= <<
for (<obj.init>;<obj.condition>;<obj.update>) <obj.statement>
>>

JStatementEnhancedFor(obj) ::= <%
for (
<collection(obj.variableModifiers, " ")>
<if(obj.variableModifiers)> <endif>
<obj.variable> : <obj.expression>
) <obj.statement>
%>

JStatementDoWhile(obj) ::= <<
do <obj.statement>
while(<obj.expression>);
>>

JArrayTypeName(obj) ::= <<
<JTypeName(obj)><obj.dimensions; format="array">
>>

JMethod(obj) ::= <<
<obj.header> <obj.body>
>>

JClassInstanceInitializer(obj) ::= <<
<obj.block>
>>

JClassStaticInitializer(obj) ::= <<
static <obj.block>
>>

JInterfaceMethod(obj) ::= <%
<if(obj.body.present)>default <endif>
<obj.header>
<if(obj.body.present)> <obj.body><endif>
<if(!obj.body.present)>;<endif>
%>

JAnnotationBody(obj) ::= <<
<writeJTypeBody(obj)>
>>

JClassBody(obj) ::= <<
<writeJTypeBody(obj)>
>>

JEnumBody(obj) ::= <<
<writeJTypeBody(obj)>
>>

JInterfaceBody(obj) ::= <<
<writeJTypeBody(obj)>
>>

