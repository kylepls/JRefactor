Set = "new java.util.HashSet<>()"
List = "new java.util.ArrayList<>()"
Optional = "java.util.Optional.empty()"
    
#fromJava = "
public static <name> fromJava(String string) {
    for (<name> operator : values()) {
        if (operator.javaString.equals(string)) {
            return operator;
        }
    }
    throw new IllegalArgumentException(string);
}
"

#staticStringConstructor = "
public static <name> of(String value) {
    return new <name>(value);
}
"

#directChildren = "
default java.util.List\<Object> getDirectChildren() { return java.util.Collections.emptyList(); }
default java.util.List\<Object> getAllChildren() { return java.util.Collections.emptyList(); }
default void replaceChild(Object child, Object replacement) {
    throw new RuntimeException();
}
"

Obj {

    #directChildren
    
    PropertyLookup {
        List<String> areas
    }
    
    AnnotationElementValue { }

    concrete TypeName {
        String type
        
        #staticStringConstructor
        
        ArrayTypeName {
            int dimensions
        }
    }

    Identifier is LambdaParameter {
        String name
        
        #staticStringConstructor
    }
    
    Block<T> {
        List<T> elements
        concrete StatementBlock<Statement> is Statement, LambdaBody {
        }
        TypeBody<T> is Unit {
            concrete ClassBody<ClassMember> {}
            concrete AnnotationBody<AnnotationMember> {}
            concrete EnumBody<EnumMember> {}
            concrete InterfaceBody<InterfaceMember> {}
        }
    }
    
    Reference {
        
        TypeArgument {
            TypeArgumentWildcard {
                Optional<TypeName> reference
                Optional<WildcardType> type
                
                inside WildcardType is Obj {
                    <javaString>
                    EXTENDS, "extends"
                    SUPER, "super"
                    
                    #fromJava
                }
            }
            TypeArgumentReference {
                TypeName reference
            }
        }
        
        concrete ExpressionTypeReference is Expression {
            TypeName reference
        }
        
    }

    LambdaParameter {
    }

    LambdaBody {
    }

    Expression is LambdaBody {

        ExpressionLambda {
            List<LambdaParameter> parameters
            LambdaBody body
        }
        
        ExpressionLiteral<T> is AnnotationValue, AnnotationElementValue {
            T value
            
            LiteralBoolean<Boolean> {}
            LiteralCharacter<Character> {}
            LiteralString<String> {}
            LiteralNumeric<T> {
                LiteralFloating<T> {
                    LiteralDouble<Double> {}
                    LiteralFloat<Float> {}
                }
                LiteralInteger<Integer> {}
                LiteralLong<Long> {}
            }
        }
        
        ExpressionAssignment {
            AssignmentOperator operator
            Expression left
            Expression right
            
            inside AssignmentOperator is Obj {
                <javaString>
                EQUAL, "="
                MULTIPLY, "*="
                DIVIDE, "/="
                MODULUS, "%="
                ADD, "+="
                SUBTRACT, "-="
                SHIFT_LEFT, "<<="
                SHIFT_RIGHT, ">>="
                ALIGN_RIGHT, ">>>="
                BINARY_AND, "&="
                BINARY_EXCLUSIVE_OR, "^="
                BINARY_INCLUSIVE_OR, "|="
                
                #fromJava
            }
        }
        
        ExpressionClassInstanceCreation {
            TypeName type
            Optional<ClassBody> body
            List<Expression> arguments
            List<TypeArgument> typeArguments
        }
        
        ExpressionName {
            Identifier identifier
        }
        
        ExpressionClassReference {
            TypeName type
        }
        
        ExpressionMethodInvocation {
            Identifier methodName
            Optional<PropertyLookup> methodArea
            List<Expression> arguments
            List<TypeArgument> typeArguments
        }
        
        ExpressionParenthesis {
            Expression expression
        }
        
        ExpressionTernary {
            Expression left
            Expression condition
            Expression right
        }
        
        ExpressionUnary {
            Expression expression
            
            UnaryCast {
                List<TypeName> bounds
            }
            
            UnaryPrePost {
                UnaryOperator operator
                
                inside UnaryOperator is Obj {
                    <javaString, formatString>
                    PRE_INCREMENT, "++", "++%s"
                    PRE_DECREMENT, "--", "--%s"
                    POST_INCREMENT, "++", "%s++"
                    POST_DECREMENT, "--", "%s--"
                    #fromJava
                }
            }
        }
        
        ExpressionLeftRight {
            LeftRightOperator operator
            Expression left
            Expression right
            
            inside LeftRightOperator is Obj {
                <javaString>
                ADD, "+"
                SUBTRACT, "-"
                MULTIPLY, "*"
                DIVIDE, "/"
                MODULUS, "%"
                CONDITIONAL_AND, "&&"
                CONDITIONAL_OR, "||"
                CONDITIONAL_LESS_THAN, "<"
                CONDITIONAL_GREATER_THAN, ">"
                CONDITIONAL_LESS_THAN_EQUAL, "<="
                CONDITIONAL_GREATER_EQUAL, ">="
                INSTANCE_OF, "instanceof"
                EQUAL, "=="
                NOT_EQUAL, "!="
                BINARY_SHIFT_LEFT, "<<"
                BINARY_SHIFT_RIGHT, ">>"
                BINARY_ALLIGN_RIGHT, ">>>"
                BINARY_INCLUSIVE_OR, "|"
                BINARY_EXCLUSIVE_OR, "^"
                BINARY_AND, "&"
                
                #fromJava
            }
        }
    }

    SwitchCase {
        List<Statement> statements
        SwitchCaseExpression {
            Expression condition
        }
        concrete SwitchCaseDefault {
        }
    }

    Statement {
        StatementControl {
            StatementControlLoop {
                StatementFor {
                    Statement statement
                    StatementBasicFor {
                        List<Statement> init
                        Optional<Expression> condition
                        List<Statement> update
                    }
                    
                    StatementEnhancedFor {
                        Set<Modifier> variableModifiers
                        Parameter variable
                        Expression expression
                    }
                }
                
                concrete StatementWhile {
                    
                    Expression expression
                    Statement statement
                
                    StatementDoWhile {}
                }
            }
            
            IdentifiableStatement {
                Optional<Identifier> identifier
                
                StatementBreak { }
                StatementContinue { }
            }
            
            StatementReturn {
                Optional<Expression> expression
            }
            
            StatementSwitch {
                Expression expression
                List<SwitchCase> caseElements
            }
            
            StatementSynchronized {
                Expression expression
                Block block
            }
            
            StatementThrow {
                Expression expression
            }
            
            StatementTry {
                Block block
                List<CatchClause> catchClauses
                Optional<Block> finallyBlock
            }
            
            StatementTryWithResources {
            }
            
            StatementIf {
                Statement statement
                Expression expression
                Optional<Statement> elseStatement
            }
        }
        
        StatementAssert {
            Expression assertion
            Optional<Expression> message
        }
        
        
        concrete StatementEmpty {
        }
        
        StatementExpression {
            Expression expression
        }
        
        StatementLabeled {
            Identifier identifier
            Statement statement
        }
        
        StatementAssert {
            Expression assertion
            Optional<Expression> message
        }
        
        StatementLabeled {
            Identifier identifier
            Statement statement
        }
        
        StatementLocalVariableDeclaration {
            List<Annotation> annotations
            Set<Modifier> modifiers
            TypeName type
            List<Variable> variables
        }
    }

    Annotation {
        TypeName type
        List<AnnotationValue> values
    }

    AnnotationValue {
        ValuePair {
            Identifier identifier
            AnnotationElementValue value
        }
    }

    Unit {
        BodyMember {
            TypeMember {
                AnnotationMember {
                }
                
                EnumMember {
                    ClassMember {
                        ClassInitializer {
                            Block block
                            
                            ClassInstanceInitializer {}
                            ClassStaticInitializer {}
                        }
                        
                        Method {
                            MethodHeader header
                            Block body
                        }
                    }
                }
                
                InterfaceMember {
                    InterfaceMethod {
                        MethodHeader header
                        Optional<Block> body
                    }
                }
            }
        }
        
        
    }

    Variable {
        Identifier name
        Optional<Expression> initializer
    }

    Modifiable {
        Set<Modifier> modifiers

        CatchClause {
            List<TypeName> catchTypes
            Identifier variable
            Block block
        }
        
        Annotatable {
        
            Set<Annotation> annotations 
            
            Field is ClassMember {
                TypeName type
                List<Variable> variables
            }
            
            Parameter is LambdaParameter {
                TypeName type
                Identifier name
            }
            
            ConstructorDeclaration is ClassMember {
                TypeName identifier
                List<Parameter> parameters
                List<TypeName> throwsTypes
                Block body
            }
            
            Identifiable {
                Identifier identifier
                
                TypeParameter {
                    List<TypeName> bounds
                } 
                
                EnumConstant is EnumMember {
                    List<Expression> arguments
                    Optional<ClassBody> body
                }
                
                MethodHeader {
                    TypeName returns
                    List<Parameter> parameters
                    List<TypeName> throwsTypes
                    List<TypeParameter> typeParameters
                }
                
                AnnotationField is AnnotationMember {
                    TypeName type
                    Optional<AnnotationValue> defaultValue
                }
                
                Type<T> is Unit {
                    T body
                    
                    AnnotationType<AnnotationBody> {}
                    
                    SuperInterfaceType<T> {
                        List<TypeName> superInterfaces
                        
                        TypeParameterType<T> {
                            List<TypeParameter> typeParameters
                            
                            Interface<InterfaceBody> {}
                            
                            Class<ClassBody> is ClassMember {
                                Optional<TypeName> superType
                            }
                        }
                        
                        Enum<EnumBody> {}
                    }
                }
            }
        }
    }

    Import {
        Optional<PropertyLookup> packageName
        TypeName name
        boolean onDemand
        boolean staticImport
    }

    CompilationUnit {
        Optional<String> packageName
        List<Import> importss
        List<Type> types
    }
    
    Modifier is Obj {
        <javaString>
        PUBLIC, "public"
        PRIVATE, "private"
        PROTECTED, "protected"
        FINAL, "final"
        STATIC, "static"
        STRICTFP, "strictfp"
        VOLATILE, "volatile"
        ABSTRACT, "abstract"
        SYNCHRONIZED, "synchronized"
        TRANSIENT, "transient"
        NATIVE, "native"
        
        #fromJava
    }
    
}
